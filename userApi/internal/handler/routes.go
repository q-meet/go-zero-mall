// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"context"
	"fmt"
	"github.com/pkg/errors"
	"github.com/zeromicro/go-zero/core/logx"
	"github.com/zeromicro/go-zero/rest/httpx"
	"google.golang.org/grpc/status"
	"net/http"
	"rpc-common/errorx"

	login "go-zero/mall/user/Api/internal/handler/login"
	user "go-zero/mall/user/Api/internal/handler/user"
	"go-zero/mall/user/Api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	// 全局中间件
	server.Use(serverCtx.ExampleMiddleware.GlobalHandler)
	//  定义错误
	httpx.SetErrorHandlerCtx(func(ctx context.Context, err error) (int, interface{}) {
		if rpcError,ok := status.FromError(err);ok {
			logx.WithContext(ctx).Info("rpcError,ok:",rpcError, ok)
			logx.WithContext(ctx).Info("rpcError string,ok:",err.Error(), ok)
			return http.StatusOK, errorx.New(uint32(rpcError.Code()), rpcError.Message()).Data()
		}

		causeErr := errors.Cause(err) // err类型

		fmt.Printf("%#v",err)
		fmt.Printf("%#v",causeErr)
		//errors.errorStrin
		switch e := err.(type) {
		case *errorx.BizError:
			return http.StatusOK, e.Data()
		default:
			return http.StatusInternalServerError, nil
		}
	})

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/login",
				Handler: login.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/register",
				Handler: login.RegisterHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/info",
				Handler: user.GetUserInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/info/update",
				Handler: user.UpdateUserInfoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/v1"),
	)
}
