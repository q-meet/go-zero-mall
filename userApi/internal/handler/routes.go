// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	login "go-zero/mall/user/Api/internal/handler/login"
	user "go-zero/mall/user/Api/internal/handler/user"
	"go-zero/mall/user/Api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)
/*
func TracingHandler(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// **1**
		carrier, err := trace.Extract(trace.HttpFormat, r.Header)
		// ErrInvalidCarrier means no trace id was set in http header
		if err != nil && err != trace.ErrInvalidCarrier {
			logx.Error(err)
		}

		// **2**
		ctx, span := trace.StartServerSpan(r.Context(), carrier, sysx.Hostname(), r.RequestURI)
		defer span.Finish()
		// **5**
		r = r.WithContext(ctx)

		next.ServeHTTP(w, r)
	})
}

func StartServerSpan(ctx context.Context, carrier Carrier, serviceName, operationName string) (
	context.Context, tracespec.Trace) {
	span := newServerSpan(carrier, serviceName, operationName)
	// **4**
	return context.WithValue(ctx, tracespec.TracingKey, span), span
}

func newServerSpan(carrier Carrier, serviceName, operationName string) tracespec.Trace {
	// **3**
	traceId := stringx.TakeWithPriority(func() string {
		if carrier != nil {
			return carrier.Get(traceIdKey)
		}
		return ""
	}, func() string {
		return stringx.RandId()
	})
	spanId := stringx.TakeWithPriority(func() string {
		if carrier != nil {
			return carrier.Get(spanIdKey)
		}
		return ""
	}, func() string {
		return initSpanId
	})

	return &Span{
		ctx: spanContext{
			traceId: traceId,
			spanId:  spanId,
		},
		serviceName:   serviceName,
		operationName: operationName,
		startTime:     timex.Time(),
		// 标记为server
		flag:          serverFlag,
	}
}*/
func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	// 全局中间件
	server.Use(serverCtx.ExampleMiddleware.BizTraceHandler)
	server.Use(serverCtx.ExampleMiddleware.GlobalHandler)

	//rest.WithNotAllowedHandler()
	/*
	httpx.SetErrorHandlerCtx(func(ctx context.Context, err error) (int, interface{}) {
		if rpcError,ok := status.FromError(err);ok {
			logx.WithContext(ctx).Info("rpcError,ok:",rpcError, ok)
			logx.WithContext(ctx).Info("rpcError string,ok:",err.Error(), ok)
			return http.StatusOK, errorx.New(uint32(rpcError.Code()), rpcError.Message()).Data()
		}

		causeErr := errors.Cause(err) // err类型

		fmt.Printf("%#v",err)
		fmt.Printf("%#v",causeErr)
		//errors.errorStrin
		switch e := err.(type) {
		case *errorx.BizError:
			return http.StatusOK, e.Data()
		default:
			return http.StatusInternalServerError, nil
		}
	})*/

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/login",
				Handler: login.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/register",
				Handler: login.RegisterHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/info",
				Handler: user.GetUserInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/info/update",
				Handler: user.UpdateUserInfoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/v1"),
	)
}
