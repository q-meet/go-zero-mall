// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: userscore.proto

package userscore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Userscore_Ping_FullMethodName          = "/userscore.Userscore/Ping"
	Userscore_SaveUserScore_FullMethodName = "/userscore.Userscore/SaveUserScore"
)

// UserscoreClient is the client API for Userscore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserscoreClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	SaveUserScore(ctx context.Context, in *UserScoreRequest, opts ...grpc.CallOption) (*UserScoreResponse, error)
}

type userscoreClient struct {
	cc grpc.ClientConnInterface
}

func NewUserscoreClient(cc grpc.ClientConnInterface) UserscoreClient {
	return &userscoreClient{cc}
}

func (c *userscoreClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Userscore_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userscoreClient) SaveUserScore(ctx context.Context, in *UserScoreRequest, opts ...grpc.CallOption) (*UserScoreResponse, error) {
	out := new(UserScoreResponse)
	err := c.cc.Invoke(ctx, Userscore_SaveUserScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserscoreServer is the server API for Userscore service.
// All implementations must embed UnimplementedUserscoreServer
// for forward compatibility
type UserscoreServer interface {
	Ping(context.Context, *Request) (*Response, error)
	SaveUserScore(context.Context, *UserScoreRequest) (*UserScoreResponse, error)
	mustEmbedUnimplementedUserscoreServer()
}

// UnimplementedUserscoreServer must be embedded to have forward compatible implementations.
type UnimplementedUserscoreServer struct {
}

func (UnimplementedUserscoreServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedUserscoreServer) SaveUserScore(context.Context, *UserScoreRequest) (*UserScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUserScore not implemented")
}
func (UnimplementedUserscoreServer) mustEmbedUnimplementedUserscoreServer() {}

// UnsafeUserscoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserscoreServer will
// result in compilation errors.
type UnsafeUserscoreServer interface {
	mustEmbedUnimplementedUserscoreServer()
}

func RegisterUserscoreServer(s grpc.ServiceRegistrar, srv UserscoreServer) {
	s.RegisterService(&Userscore_ServiceDesc, srv)
}

func _Userscore_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserscoreServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userscore_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserscoreServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userscore_SaveUserScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserscoreServer).SaveUserScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userscore_SaveUserScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserscoreServer).SaveUserScore(ctx, req.(*UserScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Userscore_ServiceDesc is the grpc.ServiceDesc for Userscore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Userscore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userscore.Userscore",
	HandlerType: (*UserscoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Userscore_Ping_Handler,
		},
		{
			MethodName: "SaveUserScore",
			Handler:    _Userscore_SaveUserScore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userscore.proto",
}
